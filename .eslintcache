[{"/Users/johnmartinez/Dev/dnd-horde-battler/src/App.js":"1","/Users/johnmartinez/Dev/dnd-horde-battler/src/reportWebVitals.js":"2","/Users/johnmartinez/Dev/dnd-horde-battler/src/index.js":"3"},{"size":12748,"mtime":1638478006223,"results":"4","hashOfConfig":"5"},{"size":362,"mtime":1609097664650,"results":"6","hashOfConfig":"5"},{"size":501,"mtime":1609098807629,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"1fg8mwe",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/johnmartinez/Dev/dnd-horde-battler/src/App.js",["15","16","17","18","19","20","21","22","23","24","25","26","27"],"import \"./App.css\";\nimport React, { Component } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Col, Row, FormControl, Button } from \"react-bootstrap\";\nimport {\n  GiCheckedShield,\n  GiSwordBrandish,\n  GiHearts,\n  GiDiceEightFacesEight,\n  GiDeathSkull,\n} from \"react-icons/gi\";\nimport {\n  AiOutlineUndo,\n  AiOutlineDelete,\n  AiOutlineQuestionCircle,\n  AiOutlinePlus,\n} from \"react-icons/ai\";\n\nconst MAX_DAM_DICE = 12;\nconst DICE_OPTIONS = [4, 6, 8, 10, 12, 20];\nconst STARTING_HP = 1;\nconst STARTING_AC = 10;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      creatureStats: {\n        hp: STARTING_HP,\n        ac: STARTING_AC,\n        att: 0,\n        damDice: \"\",\n        validity: true,\n      },\n      hordeA: [],\n      hordeB: [],\n      combatLog: [],\n      numOfCreatures: 1,\n      chosenHorde: \"\",\n    };\n  }\n\n  changeStats = (e) => {\n    this.setState({\n      creatureStats: {\n        ...this.state.creatureStats,\n        [e.target.name]: e.target.value,\n      },\n    });\n  };\n\n  changeParams = (e) => {\n    this.setState({\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  parseDamDice = (dice, critical) => {\n    let numOfDice, dieSize, modifier;\n    let total = 0;\n    const damDice = dice.toUpperCase();\n\n    if (damDice.includes(\"D\")) {\n      const split = damDice.split(\"D\");\n      const splitA = split[0];\n      const splitB = split[1];\n\n      if (splitB.includes(\"+\")) {\n        const splitAgain = splitB.split(\"+\");\n        dieSize = parseInt(splitAgain[0]);\n        modifier = parseInt(splitAgain[1]);\n      } else if (splitB.includes(\"-\")) {\n        const splitAgain = splitB.split(\"-\");\n        dieSize = parseInt(splitAgain[0]);\n        modifier = parseInt(splitAgain[1]);\n      } else {\n        dieSize = parseInt(split[1]);\n        modifier = 0;\n      }\n\n      numOfDice = parseInt(splitA);\n\n      if (critical) {\n        numOfDice *= 2;\n      }\n\n      const maxDieRoll = dieSize + modifier;\n      const minDieRoll = 1 + modifier;\n\n      for (var i = 0; i < numOfDice; i++) {\n        //Loop a number of times equal to the number of dice\n        total += this.rollDie(minDieRoll, maxDieRoll);\n      }\n\n      return total;\n    } else {\n      this.setState({\n        validity: false,\n      });\n    }\n  };\n\n  rollDie = (min, max) => {\n    return min + Math.floor(Math.random() * (max - min + 1));\n  };\n\n  handleAddToHorde = () => {\n    const { creatureStats, numOfCreatures, chosenHorde } = this.state;\n    const newHorde = this.state[chosenHorde];\n\n    for (let i = 0; i < numOfCreatures; i++) {\n      const newCreature = {\n        num: newHorde.length + 1,\n        hp: parseInt(creatureStats.hp) || 1,\n        maxHp: parseInt(creatureStats.hp) || 1,\n        ac: parseInt(creatureStats.ac) || 10,\n        att: parseInt(creatureStats.att) || 0,\n        damDice: creatureStats.damDice || \"1d1\",\n      };\n      newHorde.push(newCreature);\n    }\n\n    this.setState({\n      [this.state.chosenHorde]: newHorde,\n    });\n  };\n\n  deleteCreature = (horde, i) => {\n    const correctHordeArr = this.state[horde];\n    const deletedCreature = correctHordeArr.splice(i, 1);\n\n    this.setState({\n      [horde]: correctHordeArr,\n    });\n  };\n\n  attack = (attHorde, defender) => {\n    const attackingHorde = this.state[attHorde];\n    const combatLog = this.state.combatLog;\n    let defendingHorde = this.state[defender];\n\n    for (let i = 0; i < attackingHorde.length; i++) {\n      const attacker = attackingHorde[i];\n      if (attacker.hp > 0) {\n        let indexBeingAttacked = Math.floor(\n          Math.random() * defendingHorde.length\n        );\n        if (defendingHorde[indexBeingAttacked].hp <= 0) {\n          indexBeingAttacked = Math.floor(\n            Math.random() * defendingHorde.length\n          );\n        }\n\n        const defender = defendingHorde[indexBeingAttacked];\n\n        const attackRoll = this.rollDie(1 + attacker.att, 20 + attacker.att);\n\n        if (attackRoll - attacker.att == 20) {\n          const total = this.parseDamDice(\n            attackingHorde[i].damDice,\n            \"critical\"\n          );\n          combatLog.push(\n            `#${attacker.num} from ${attHorde} attacks #${defender.num} scoring a critical hit (${attackRoll}), dealing ${total} damage!!`\n          );\n        } else if (attackRoll >= defender.ac) {\n          const total = this.parseDamDice(attackingHorde[i].damDice);\n          defendingHorde[indexBeingAttacked].hp -= total;\n          combatLog.push(\n            `#${attacker.num} from ${attHorde} attacks #${defender.num} and hits (${attackRoll}), dealing ${total} damage!`\n          );\n\n          this.setState({\n            [defender]: {\n              ...this.state[defender],\n              arr: defendingHorde,\n            },\n            combatLog: combatLog,\n          });\n        } else {\n          combatLog.push(\n            `#${attacker.num} from ${attHorde} attacks #${defender.num} and misses (${attackRoll}).`\n          );\n          this.setState({\n            combatLog: combatLog,\n          });\n        }\n      }\n    }\n  };\n\n  resetHorde = (horde) => {\n    this.setState({\n      [horde]: [],\n    });\n  };\n\n  renderCreature = (creature, horde, i) => {\n    const { maxHp, hp, num } = creature;\n    let currentHp = hp > 0 ? hp : 0;\n\n    let id;\n    if (currentHp == 0) {\n      id = \"dead\";\n    } else if (currentHp < maxHp && currentHp > maxHp / 2) {\n      id = \"damaged\";\n    } else if (currentHp <= maxHp / 2) {\n      id = \"bloodied\";\n    } else {\n      id = \"normal\";\n    }\n\n    return (\n      <div\n        key={`creatureContainer; ${horde}: ${i}`}\n        className=\"creature-container\"\n        id={id}\n      >\n        <AiOutlineDelete\n          className=\"delete-icon\"\n          onClick={() => this.deleteCreature(horde, i)}\n        />\n        <div className=\"creature-designation\">#{num}</div>\n        <GiDeathSkull className=\"skull\" />\n        <div className=\"data\">\n          {currentHp} / {maxHp}\n        </div>\n      </div>\n    );\n  };\n\n  renderCombatLogEntry = (entry, i) => {\n    return (\n      <div key={`combatLogEntry: ${i}`} className=\"entry\">\n        {`Entry #${i + 1}.`}\n        <div className=\"text\">{entry}</div>\n      </div>\n    );\n  };\n\n  disabledAttackBtn = () => {\n    let disabled = false;\n    let countA = 0;\n    let countB = 0;\n    for (let i = 0; i < this.state.hordeA.length; i++) {\n      if (this.state.hordeA[i].hp == 0) {\n        countA++;\n      }\n    }\n\n    for (let i = 0; i < this.state.hordeB.length; i++) {\n      if (this.state.hordeB[i].hp == 0) {\n        countB++;\n      }\n    }\n\n    if (\n      countA == this.state.hordeA.length ||\n      countB == this.state.hordeB.length ||\n      this.state.hordeA.length == 0 ||\n      this.state.hordeB.length == 0\n    ) {\n      disabled = true;\n    }\n\n    return disabled;\n  };\n\n  //////////////////////////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////////////////////\n\n  header = () => (\n    <div className=\"title-content\">\n      <div className=\"title\">D&D Horde Battler</div>\n      <div className=\"subtext\">\n        This program utilizes basic d20 rules to determine the outcome of a\n        pitched battle between two groups of combatants.\n      </div>\n    </div>\n  );\n\n  creatureStats = () => {\n    const { hp, ac, att, damDice } = this.state.creatureStats;\n    return (\n      <div className=\"horde-data-div\">\n        <div className=\"creature-input-container\">\n          <FormControl\n            onChange={this.changeParams}\n            name=\"numOfCreatures\"\n            value={this.state.numOfCreatures}\n            placeholder=\"# of creatures...\"\n            type=\"number\"\n            className=\"number-of-creatures-form-control\"\n          />\n\n          <FormControl\n            onChange={this.changeParams}\n            name=\"chosenHorde\"\n            value={this.state.chosenHorde}\n            as=\"select\"\n            className=\"select-horde-form-control\"\n          >\n            <option value=\"\">Select a horde...</option>\n            <option value=\"hordeA\">Horde A</option>\n            <option value=\"hordeB\">Horde B</option>\n          </FormControl>\n\n          <Button\n            onClick={() => this.handleAddToHorde(\"hordeA\")}\n            className=\"common-button add-button\"\n          >\n            <AiOutlinePlus />\n            Add to Horde\n          </Button>\n        </div>\n\n        <div className=\"header\">Creature Stats</div>\n\n        <Row noGutters>\n          <Col lg={4} className=\"form-control-container\">\n            <label>\n              <GiHearts className=\"label-icon\" />\n              HP\n            </label>\n            <FormControl\n              onChange={this.changeStats}\n              name=\"hp\"\n              value={hp}\n              type=\"number\"\n            />\n          </Col>\n\n          <Col lg={4} className=\"form-control-container\">\n            <label>\n              <GiCheckedShield className=\"label-icon\" />\n              AC\n            </label>\n            <FormControl\n              onChange={this.changeStats}\n              name=\"ac\"\n              value={ac}\n              type=\"number\"\n            />\n          </Col>\n\n          <Col lg={4} className=\"form-control-container\">\n            <label>\n              <GiSwordBrandish className=\"label-icon\" />\n              Attack Bonus\n            </label>\n            <FormControl\n              onChange={this.changeStats}\n              name=\"att\"\n              value={att}\n              type=\"number\"\n            />\n          </Col>\n\n          <Col lg={4} className=\"form-control-container\">\n            <label>\n              <GiDiceEightFacesEight className=\"label-icon\" />\n              Damage\n            </label>\n            <FormControl\n              onChange={this.changeStats}\n              name=\"damDice\"\n              placeholder=\"Ex. 1d8+2; 3d6+4\"\n              value={damDice}\n            />\n          </Col>\n        </Row>\n      </div>\n    );\n  };\n\n  hordeA = () => {\n    const disabled = this.disabledAttackBtn();\n    const horde = this.state.hordeA;\n    const remaining = horde.reduce((acc, cur) => (cur.hp > 0 ? ++acc : acc), 0);\n    return (\n      <div className=\"horde-data-div horde-container\">\n        <Button\n          disabled={disabled}\n          onClick={() => this.attack(\"hordeA\", \"hordeB\")}\n          className=\"common-button attack-button\"\n        >\n          <GiSwordBrandish />\n          Attack!\n        </Button>\n\n        <AiOutlineUndo\n          onClick={() => this.resetHorde(\"hordeA\")}\n          className=\"reset-icon\"\n        />\n\n        <div className=\"header\">{`Horde A (${remaining}/${horde.length})`}</div>\n        <Row noGutters>\n          {horde.map((creature, i) =>\n            this.renderCreature(creature, \"hordeA\", i)\n          )}\n        </Row>\n      </div>\n    );\n  };\n\n  hordeB = () => {\n    const disabled = this.disabledAttackBtn();\n    const horde = this.state.hordeB;\n    const remaining = horde.reduce((acc, cur) => (cur.hp > 0 ? ++acc : acc), 0);\n    return (\n      <div className=\"horde-data-div horde-container\">\n        <Button\n          disabled={disabled}\n          onClick={() => this.attack(\"hordeB\", \"hordeA\")}\n          className=\"common-button attack-button\"\n        >\n          <GiSwordBrandish />\n          Attack!\n        </Button>\n\n        <AiOutlineUndo\n          onClick={() => this.resetHorde(\"hordeB\")}\n          className=\"reset-icon\"\n        />\n\n        <div className=\"header\">{`Horde B (${remaining}/${horde.length})`}</div>\n        <Row noGutters>\n          {horde.map((creature, i) =>\n            this.renderCreature(creature, \"hordeB\", i)\n          )}\n        </Row>\n      </div>\n    );\n  };\n\n  footer = () => (\n    <div className=\"footer\">\n      Created by{\" \"}\n      <a\n        target=\"_blank\"\n        href=\"https://john-martinez-729.github.io/personal-site/\"\n      >\n        John Martinez\n      </a>\n    </div>\n  );\n\n  combatLog = () => (\n    <div className=\"horde-data-div combat-log-container\">\n      <div className=\"header\">Combat Log</div>\n      <div className=\"combat-log\">\n        {this.state.combatLog.map((entry, i) =>\n          this.renderCombatLogEntry(entry, i)\n        )}\n      </div>\n    </div>\n  );\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Row noGutters className=\"top-row\">\n          <Col lg={6} className=\"top-col divider\">\n            {this.header()}\n            {this.creatureStats()}\n          </Col>\n          <Col lg={6} className=\"top-col\">\n            {this.hordeA()}\n            {this.hordeB()}\n            {this.combatLog()}\n          </Col>\n        </Row>\n        {this.footer()}\n      </div>\n    );\n  }\n}\n\n// {this.header()}\n// {this.creatureStats()}\n//\n// {this.hordeA()}\n// {this.hordeB()}\n// {this.combatLog()}\n\nexport default App;\n","/Users/johnmartinez/Dev/dnd-horde-battler/src/reportWebVitals.js",[],"/Users/johnmartinez/Dev/dnd-horde-battler/src/index.js",[],{"ruleId":"28","severity":1,"message":"29","line":15,"column":3,"nodeType":"30","messageId":"31","endLine":15,"endColumn":26},{"ruleId":"28","severity":1,"message":"32","line":19,"column":7,"nodeType":"30","messageId":"31","endLine":19,"endColumn":19},{"ruleId":"28","severity":1,"message":"33","line":20,"column":7,"nodeType":"30","messageId":"31","endLine":20,"endColumn":19},{"ruleId":"28","severity":1,"message":"34","line":131,"column":11,"nodeType":"30","messageId":"31","endLine":131,"endColumn":26},{"ruleId":"35","severity":1,"message":"36","line":159,"column":39,"nodeType":"37","messageId":"38","endLine":159,"endColumn":41},{"ruleId":"35","severity":1,"message":"36","line":204,"column":19,"nodeType":"37","messageId":"38","endLine":204,"endColumn":21},{"ruleId":"35","severity":1,"message":"36","line":247,"column":35,"nodeType":"37","messageId":"38","endLine":247,"endColumn":37},{"ruleId":"35","severity":1,"message":"36","line":253,"column":35,"nodeType":"37","messageId":"38","endLine":253,"endColumn":37},{"ruleId":"35","severity":1,"message":"36","line":259,"column":14,"nodeType":"37","messageId":"38","endLine":259,"endColumn":16},{"ruleId":"35","severity":1,"message":"36","line":260,"column":14,"nodeType":"37","messageId":"38","endLine":260,"endColumn":16},{"ruleId":"35","severity":1,"message":"36","line":261,"column":32,"nodeType":"37","messageId":"38","endLine":261,"endColumn":34},{"ruleId":"35","severity":1,"message":"36","line":262,"column":32,"nodeType":"37","messageId":"38","endLine":262,"endColumn":34},{"ruleId":"39","severity":1,"message":"40","line":441,"column":9,"nodeType":"41","endLine":441,"endColumn":24},"no-unused-vars","'AiOutlineQuestionCircle' is defined but never used.","Identifier","unusedVar","'MAX_DAM_DICE' is assigned a value but never used.","'DICE_OPTIONS' is assigned a value but never used.","'deletedCreature' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute"]